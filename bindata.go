// Code generated by go-bindata.
// sources:
// data/assets/css/style.css
// data/templates/index.html
// DO NOT EDIT!

package bingo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAssetsCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\xd1\x6e\xea\x30\x0c\x86\xef\x79\x0a\x4b\xe7\x96\xa0\xb4\x07\x36\x14\xa4\xbd\x4b\x68\x9d\x36\x5b\x12\x47\x89\x19\x74\xd3\xde\x7d\x02\x32\x46\xbb\x72\x53\x55\x9f\xf3\xdb\x9f\xfe\x95\xd7\x21\xea\x0e\xe1\x73\x01\x60\x28\xb0\x30\xda\x5b\x37\x28\xf0\x14\x28\x47\xdd\xe0\xee\x67\x92\xed\x07\x2a\xa8\xd6\xf1\x74\x46\xce\x06\x14\x3d\xda\xae\x67\x05\xd5\x6a\x5d\x6f\x37\xcf\x55\xf9\xfe\x3f\x3f\xf0\xfa\x24\x8e\xb6\xe5\x5e\xc1\x56\xca\x6b\x88\xf1\xc4\x42\x3b\xdb\x05\x05\xaf\x87\xcc\xd6\x0c\x3b\xf8\x5a\x00\xdc\x3c\xfa\xea\xa2\x32\x3a\x59\x97\xf4\xe4\x68\x3d\x8d\xd6\x7f\xa3\xd5\xd3\x6c\xb4\x5a\xd5\x9b\x2b\xf6\x3a\x75\x36\x08\xa6\x78\x7f\xa7\xd0\x3d\x31\x93\x57\x20\xaf\xf4\x62\xcf\x49\x87\x6c\x28\x79\x05\x87\x18\x31\x35\x3a\xe3\x44\x44\x2f\xef\xfe\x95\xb3\xe1\x6d\x04\x7a\x7a\xc7\x54\x54\x1b\x72\x94\x14\xfc\x93\x52\x4a\x63\x76\xbf\xfa\xc7\x62\xba\x27\xd7\x4e\xd6\x67\x6c\xd8\x52\x80\x17\x88\xcb\x39\x7a\x70\xb3\x98\xe6\x71\x43\x2d\xce\x0e\x62\xc2\x22\x79\xdf\x91\x1c\x15\xe4\xd0\xb0\x82\xcd\xb9\xb7\x47\x8e\x0f\x6d\xca\xf2\xa8\xdb\xd6\x86\xee\xb6\xd9\xd9\xcc\x22\xf3\xe0\x50\xf0\x10\x51\x41\xa0\x70\x29\xf8\x3b\x00\x00\xff\xff\x84\x61\x9b\xd8\xab\x02\x00\x00")

func dataAssetsCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_dataAssetsCssStyleCss,
		"data/assets/css/style.css",
	)
}

func dataAssetsCssStyleCss() (*asset, error) {
	bytes, err := dataAssetsCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/assets/css/style.css", size: 683, mode: os.FileMode(420), modTime: time.Unix(1483453599, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x94\x41\x8f\xd3\x30\x10\x85\xef\xfd\x15\x23\x9f\xe0\xb0\xb1\xda\x13\x07\xc7\x07\xc4\xb2\xe2\x00\x87\xa5\x3d\x21\x84\x4c\x32\x5b\x5b\x38\x4e\xd6\x9e\x4a\x54\x96\xff\x3b\x4a\x9c\xd2\x40\x93\xb2\x80\xe0\xd8\x79\x33\x7e\x5f\xe7\xb5\x23\x34\x35\x56\xae\x84\x46\x55\xcb\x15\x00\x80\x68\x90\x14\x54\x5a\xf9\x80\x54\xb2\xdd\xf6\xf5\xcd\x0b\x36\x4a\x64\xc8\xa2\x8c\xb1\x78\xa7\x1a\x4c\xe9\xd9\xfa\xb9\xe0\xb9\x96\x75\x6b\xdc\x17\xf0\x68\x4b\x16\xe8\x68\x31\x68\x44\x62\x40\xc7\x0e\x4b\x46\xf8\x95\x78\x15\x02\x03\xed\xf1\xa1\x64\xfc\x93\x0a\x01\x29\xf4\x35\x3e\xb4\x17\xbd\x2a\x57\x82\x67\x18\xf1\xb9\xad\x8f\x27\x26\x65\x1c\x54\x56\x85\x50\xb2\x46\xb9\x4e\xed\x71\x64\x1a\x64\xbd\xfe\x09\x4a\xaf\xe5\xea\x2c\x07\xac\xc8\xb4\x0e\x4c\x5d\x32\xa7\x9a\xe9\x68\x1e\xdf\xc8\x7e\x56\x70\xbd\x99\x8c\x0d\x52\x77\x7e\x18\x6e\x20\xc6\xe2\xbd\x6e\x3d\xbd\xc2\x50\x79\xd3\xf5\x8f\xa6\x24\x78\x37\x41\xe1\xa3\xd9\x92\x7f\x7d\x1e\x9d\xc1\x98\x3c\xbc\x48\xf3\x17\xe6\xe8\xea\xae\x35\x8e\xc2\x8c\xf5\xed\x49\x9b\x33\x3e\xd8\x1f\x07\xc6\xb4\xa5\x50\xa7\x34\x99\xe4\x82\x2b\x09\x5b\x6d\x02\xf4\xf9\x08\x6e\xcd\xe5\x50\x8c\x5e\xb9\x3d\x42\xf1\xdd\x2e\xa5\x8b\xa6\xdc\x68\x1e\x00\x1f\xa1\x78\x8b\xa4\xdb\x1a\xd8\xdd\xed\x96\x2d\xf4\x5e\xd0\xc4\x58\xbc\x3c\x18\x5b\xef\xbc\x49\x89\xf5\x4b\xdb\x79\x53\xdc\xe3\xe3\x01\x03\xed\xee\xdf\xf4\x7b\x53\x12\x2e\x97\x39\x87\x9c\x69\xd0\x06\xfc\x95\x7d\x20\xdf\xba\xfd\xbc\xdd\xa8\xc1\x87\x18\xc7\xaf\x94\xd2\xc7\xdf\x23\x70\xf5\x0c\xc0\xa9\xbe\xbc\xe9\x3b\xdf\x1e\xba\xa5\x35\x0f\xdc\x7a\x73\xfe\x95\x0f\xe9\x5f\xc3\x78\x62\x7e\xf0\x07\x19\xc2\x3f\xcf\x11\x9e\x92\x25\xfc\x8f\x3c\xe1\x4a\xa6\xd7\xb4\xb9\xba\xe0\xd3\xff\xe7\xe4\x0a\xe4\x8f\xfd\xf1\xec\xcf\x6a\xbe\xa7\x82\xe7\x93\xff\x2d\x00\x00\xff\xff\x84\x24\x61\x02\xfa\x05\x00\x00")

func dataTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataTemplatesIndexHtml,
		"data/templates/index.html",
	)
}

func dataTemplatesIndexHtml() (*asset, error) {
	bytes, err := dataTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/templates/index.html", size: 1530, mode: os.FileMode(420), modTime: time.Unix(1483608656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/assets/css/style.css": dataAssetsCssStyleCss,
	"data/templates/index.html": dataTemplatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"css": &bintree{nil, map[string]*bintree{
				"style.css": &bintree{dataAssetsCssStyleCss, map[string]*bintree{}},
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{dataTemplatesIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

